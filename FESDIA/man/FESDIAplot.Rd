\name{Plotting functions}
\alias{image2D.FESDIAdyn}
\alias{matplot1D}
\alias{matplot1D,default-method}
\alias{matplot1D,FESDIAdyn-method}
\alias{matplot1D.default}
\alias{matplot1D.FESDIAdyn}
\alias{plot.FESDIAstd} 

\title{
  Utility functions for plotting FESDIA dynamic or steady-state model output.
}
\description{

  \code{image2D} generates a 2-D image (x=time, y=depth) of the dynamic output.
  
  \code{matplot1D} plots how profiles change with time. These plots will have the depth on the y-axis, and will plot all profiles.

  \code{plot} plots steady-state profiles, with the depth on the y-axis.
}


\usage{

\method{image2D}{FESDIAdyn}(z, which, ylim = c(20, 0), 
   colkey = list(cex.clab = 0.8, line.clab = 0.5, cex.axis = 0.8), \dots) 

\method{matplot1D}{default}(z, \dots) 
\method{matplot1D}{FESDIAdyn}(z, which, ylim = c(20, 0), 
  type = "l", col = "grey",  lty = 1, \dots) 

matplot1D (z, \dots) 

\method{plot}{FESDIAstd}(x, \dots, which, ylim = c(20, 0)) 
 
}
\arguments{

  \item{z}{ object of class \code{FESDIAdyn} 
  generated by \link{FESDIAdyna}.   
  }  
  \item{x}{ object of class \code{FESDIAstd}
  generated by \link{FESDIAsolve}.   
  }  
  \item{which}{ The name(s) of the 1-dimensional output to be plotted versus time.
  }
  \item{ylim}{ The ranges of the y-axis. default it to have the y-axis extend downward, from 0 to 20 cm
  }
  \item{colkey}{ A list with specifications of the color key. The default is to have a smaller  title (\code{cex.clab}) and axis labels (\code{cex.axis}), the key title positioned close to the color key (\code{line.clab}), See \link[plot3D]{colkey}
  }
  \item{type, col, lty}{ The type of plot, the color and type of the lines used for plotting
  }
  \item{...}{ Any argument passed to the functions \link[plot3D]{image2D} and \link[deSolve]{matplot.1D} .
  }
}


\author{
  Karline Soetaert
}


\examples{

# =============================
# Plotting dynamic output
# =============================

  out <- FESDIAdyna(CfluxForc = list(amp = 1))
  image2D(out, which = 1:9)


  image2D(out, which = "O2", ylim = c(5, 0), mfrow = c(1,2))
  matplot1D(out, which = 3, col = "grey", ylim = c(5,0), mfrow = NULL) 
  O2mean <- FESDIA1D(out, "O2")
  head(O2mean)
  lines(O2mean$O2, O2mean$x) 
  
  
# The same but more elaborate
  O2 <- subset(out, which = "O2")
  image2D(O2, x = out[,"time"], y = FESDIAdepth(out), ylim = c(10,0))

# =============================
# Plotting steady-state output
# =============================

  std <- FESDIAsolve()
  plot(std, which = c("TOC", "O2"))
}
\keyword{ utilities }
